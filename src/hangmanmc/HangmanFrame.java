/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package hangmanmc;

import java.awt.CardLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.image.BufferedImage;
import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.KeyStroke;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;

/**
 *
 * @author Michael
 */
public class HangmanFrame extends javax.swing.JFrame {

    private static final Map<String, Dictionary> DICTIONARIES = new HashMap<>();
    private String selectedKey;
    private Word word;
    private Image currentImage;

    static {
        DICTIONARIES.put("Easy", new Dictionary(Dictionary.EASY));
        DICTIONARIES.put("Medium", new Dictionary(Dictionary.MED));
        DICTIONARIES.put("Hard", new Dictionary(Dictionary.HARD));
        DICTIONARIES.put("Custom", null);
    }

    /**
     * Creates new form HangmanFrame
     */
    public HangmanFrame() {
        initComponents();
        initStartPanel();
        updateImage(Word.getStartImage());
        pack();

        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        difficultyButtons = new javax.swing.ButtonGroup();
        centerPanel = new javax.swing.JPanel();
        leftPanel = new javax.swing.JPanel();
        startPanel = new javax.swing.JPanel();
        startButton = new javax.swing.JButton();
        easyButton = new javax.swing.JRadioButton();
        mediumButton = new javax.swing.JRadioButton();
        hardButton = new javax.swing.JRadioButton();
        customPanel = new javax.swing.JPanel();
        customButton = new javax.swing.JRadioButton();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(32767, 0));
        customField = new javax.swing.JPasswordField();
        textPanel = new javax.swing.JPanel();
        wordLabel = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        rightPanel = new javax.swing.JPanel();
        guessedLabel = new javax.swing.JLabel();
        imageLabel = new javax.swing.JLabel();
        bottomPanel = new javax.swing.JPanel();
        keyPanel = new javax.swing.JPanel();
        row1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton19 = new javax.swing.JButton();
        row2 = new javax.swing.JPanel();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jButton18 = new javax.swing.JButton();
        row3 = new javax.swing.JPanel();
        jButton21 = new javax.swing.JButton();
        jButton22 = new javax.swing.JButton();
        jButton23 = new javax.swing.JButton();
        jButton24 = new javax.swing.JButton();
        jButton25 = new javax.swing.JButton();
        jButton26 = new javax.swing.JButton();
        jButton27 = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(40, 0), new java.awt.Dimension(32767, 0));
        endPanel = new javax.swing.JPanel();
        endMessage = new javax.swing.JLabel();
        endButtons = new javax.swing.JPanel();
        againButton = new javax.swing.JButton();
        homeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(436, 305));
        setPreferredSize(new java.awt.Dimension(1024, 640));

        centerPanel.setLayout(new java.awt.GridLayout(1, 0));

        leftPanel.setLayout(new java.awt.CardLayout());

        startPanel.setPreferredSize(new java.awt.Dimension(200, 287));
        startPanel.setLayout(new java.awt.GridLayout(5, 0));

        startButton.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        startButton.setText("Start Game");
        startButton.setToolTipText("Select a difficulty");
        startButton.setEnabled(false);
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });
        startPanel.add(startButton);

        difficultyButtons.add(easyButton);
        easyButton.setText("Easy");
        easyButton.setMargin(new java.awt.Insets(0, 20, 0, 0));
        easyButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                easyButtonItemStateChanged(evt);
            }
        });
        startPanel.add(easyButton);

        difficultyButtons.add(mediumButton);
        mediumButton.setText("Medium");
        mediumButton.setMargin(new java.awt.Insets(0, 20, 0, 0));
        mediumButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                mediumButtonItemStateChanged(evt);
            }
        });
        startPanel.add(mediumButton);

        difficultyButtons.add(hardButton);
        hardButton.setText("Hard");
        hardButton.setMargin(new java.awt.Insets(0, 20, 0, 0));
        hardButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                hardButtonItemStateChanged(evt);
            }
        });
        startPanel.add(hardButton);

        customPanel.setLayout(new javax.swing.BoxLayout(customPanel, javax.swing.BoxLayout.X_AXIS));

        difficultyButtons.add(customButton);
        customButton.setText("Custom");
        customButton.setMargin(new java.awt.Insets(0, 20, 0, 0));
        customButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                customButtonItemStateChanged(evt);
            }
        });
        customPanel.add(customButton);
        customPanel.add(filler2);

        customField.setMaximumSize(new Dimension(Integer.MAX_VALUE, customField.getPreferredSize().height));
        customField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customFieldActionPerformed(evt);
            }
        });
        customPanel.add(customField);

        startPanel.add(customPanel);

        leftPanel.add(startPanel, "startPanel");

        textPanel.setLayout(new java.awt.BorderLayout());

        wordLabel.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        wordLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        wordLabel.setText("C O U N T E R R E V O L U T I O N A R I E S");
        wordLabel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                wordLabelComponentResized(evt);
            }
        });
        textPanel.add(wordLabel, java.awt.BorderLayout.CENTER);

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        textPanel.add(backButton, java.awt.BorderLayout.PAGE_START);

        leftPanel.add(textPanel, "textPanel");

        centerPanel.add(leftPanel);

        rightPanel.setLayout(new java.awt.BorderLayout());

        guessedLabel.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        guessedLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        guessedLabel.setText(" ");
        rightPanel.add(guessedLabel, java.awt.BorderLayout.PAGE_END);

        imageLabel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                imageLabelComponentResized(evt);
            }
        });
        rightPanel.add(imageLabel, java.awt.BorderLayout.CENTER);

        centerPanel.add(rightPanel);

        getContentPane().add(centerPanel, java.awt.BorderLayout.CENTER);

        bottomPanel.setLayout(new java.awt.CardLayout());

        keyPanel.setLayout(new java.awt.GridLayout(3, 1));

        row1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jButton1.setFont(new java.awt.Font("sansserif", 0, 10)); // NOI18N
        jButton1.setText("Q");
        jButton1.setEnabled(false);
        jButton1.setFocusable(false);
        jButton1.setMaximumSize(new java.awt.Dimension(40, 40));
        jButton1.setPreferredSize(new java.awt.Dimension(37, 37));
        row1.add(jButton1);

        jButton2.setFont(new java.awt.Font("sansserif", 0, 10)); // NOI18N
        jButton2.setText("W");
        jButton2.setEnabled(false);
        jButton2.setFocusable(false);
        jButton2.setPreferredSize(new java.awt.Dimension(37, 37));
        row1.add(jButton2);

        jButton3.setFont(new java.awt.Font("sansserif", 0, 10)); // NOI18N
        jButton3.setText("E");
        jButton3.setEnabled(false);
        jButton3.setFocusable(false);
        jButton3.setPreferredSize(new java.awt.Dimension(37, 37));
        row1.add(jButton3);

        jButton4.setFont(new java.awt.Font("sansserif", 0, 10)); // NOI18N
        jButton4.setText("R");
        jButton4.setEnabled(false);
        jButton4.setFocusable(false);
        jButton4.setPreferredSize(new java.awt.Dimension(37, 37));
        row1.add(jButton4);

        jButton5.setFont(new java.awt.Font("sansserif", 0, 10)); // NOI18N
        jButton5.setText("T");
        jButton5.setEnabled(false);
        jButton5.setFocusable(false);
        jButton5.setPreferredSize(new java.awt.Dimension(37, 37));
        row1.add(jButton5);

        jButton6.setFont(new java.awt.Font("sansserif", 0, 10)); // NOI18N
        jButton6.setText("Y");
        jButton6.setEnabled(false);
        jButton6.setFocusable(false);
        jButton6.setPreferredSize(new java.awt.Dimension(37, 37));
        row1.add(jButton6);

        jButton7.setFont(new java.awt.Font("sansserif", 0, 10)); // NOI18N
        jButton7.setText("U");
        jButton7.setEnabled(false);
        jButton7.setFocusable(false);
        jButton7.setPreferredSize(new java.awt.Dimension(37, 37));
        row1.add(jButton7);

        jButton8.setFont(new java.awt.Font("sansserif", 0, 10)); // NOI18N
        jButton8.setText("I");
        jButton8.setEnabled(false);
        jButton8.setFocusable(false);
        jButton8.setPreferredSize(new java.awt.Dimension(37, 37));
        row1.add(jButton8);

        jButton9.setFont(new java.awt.Font("sansserif", 0, 10)); // NOI18N
        jButton9.setText("O");
        jButton9.setEnabled(false);
        jButton9.setFocusable(false);
        jButton9.setPreferredSize(new java.awt.Dimension(37, 37));
        row1.add(jButton9);

        jButton19.setFont(new java.awt.Font("sansserif", 0, 10)); // NOI18N
        jButton19.setText("P");
        jButton19.setEnabled(false);
        jButton19.setFocusable(false);
        jButton19.setPreferredSize(new java.awt.Dimension(37, 37));
        row1.add(jButton19);

        keyPanel.add(row1);

        jButton10.setFont(new java.awt.Font("sansserif", 0, 10)); // NOI18N
        jButton10.setText("A");
        jButton10.setEnabled(false);
        jButton10.setFocusable(false);
        jButton10.setPreferredSize(new java.awt.Dimension(37, 37));
        row2.add(jButton10);

        jButton11.setFont(new java.awt.Font("sansserif", 0, 10)); // NOI18N
        jButton11.setText("S");
        jButton11.setEnabled(false);
        jButton11.setFocusable(false);
        jButton11.setPreferredSize(new java.awt.Dimension(37, 37));
        row2.add(jButton11);

        jButton12.setFont(new java.awt.Font("sansserif", 0, 10)); // NOI18N
        jButton12.setText("D");
        jButton12.setEnabled(false);
        jButton12.setFocusable(false);
        jButton12.setPreferredSize(new java.awt.Dimension(37, 37));
        row2.add(jButton12);

        jButton13.setFont(new java.awt.Font("sansserif", 0, 10)); // NOI18N
        jButton13.setText("F");
        jButton13.setEnabled(false);
        jButton13.setFocusable(false);
        jButton13.setPreferredSize(new java.awt.Dimension(37, 37));
        row2.add(jButton13);

        jButton14.setFont(new java.awt.Font("sansserif", 0, 10)); // NOI18N
        jButton14.setText("G");
        jButton14.setEnabled(false);
        jButton14.setFocusable(false);
        jButton14.setPreferredSize(new java.awt.Dimension(37, 37));
        row2.add(jButton14);

        jButton15.setFont(new java.awt.Font("sansserif", 0, 10)); // NOI18N
        jButton15.setText("H");
        jButton15.setEnabled(false);
        jButton15.setFocusable(false);
        jButton15.setPreferredSize(new java.awt.Dimension(37, 37));
        row2.add(jButton15);

        jButton16.setFont(new java.awt.Font("sansserif", 0, 10)); // NOI18N
        jButton16.setText("J");
        jButton16.setEnabled(false);
        jButton16.setFocusable(false);
        jButton16.setPreferredSize(new java.awt.Dimension(37, 37));
        row2.add(jButton16);

        jButton17.setFont(new java.awt.Font("sansserif", 0, 10)); // NOI18N
        jButton17.setText("K");
        jButton17.setEnabled(false);
        jButton17.setFocusable(false);
        jButton17.setPreferredSize(new java.awt.Dimension(37, 37));
        row2.add(jButton17);

        jButton18.setFont(new java.awt.Font("sansserif", 0, 10)); // NOI18N
        jButton18.setText("L");
        jButton18.setEnabled(false);
        jButton18.setFocusable(false);
        jButton18.setPreferredSize(new java.awt.Dimension(37, 37));
        row2.add(jButton18);

        keyPanel.add(row2);

        jButton21.setFont(new java.awt.Font("sansserif", 0, 10)); // NOI18N
        jButton21.setText("Z");
        jButton21.setEnabled(false);
        jButton21.setFocusable(false);
        jButton21.setPreferredSize(new java.awt.Dimension(37, 37));
        row3.add(jButton21);

        jButton22.setFont(new java.awt.Font("sansserif", 0, 10)); // NOI18N
        jButton22.setText("X");
        jButton22.setEnabled(false);
        jButton22.setFocusable(false);
        jButton22.setPreferredSize(new java.awt.Dimension(37, 37));
        row3.add(jButton22);

        jButton23.setFont(new java.awt.Font("sansserif", 0, 10)); // NOI18N
        jButton23.setText("C");
        jButton23.setEnabled(false);
        jButton23.setFocusable(false);
        jButton23.setPreferredSize(new java.awt.Dimension(37, 37));
        row3.add(jButton23);

        jButton24.setFont(new java.awt.Font("sansserif", 0, 10)); // NOI18N
        jButton24.setText("V");
        jButton24.setEnabled(false);
        jButton24.setFocusable(false);
        jButton24.setPreferredSize(new java.awt.Dimension(37, 37));
        row3.add(jButton24);

        jButton25.setFont(new java.awt.Font("sansserif", 0, 10)); // NOI18N
        jButton25.setText("B");
        jButton25.setEnabled(false);
        jButton25.setFocusable(false);
        jButton25.setPreferredSize(new java.awt.Dimension(37, 37));
        row3.add(jButton25);

        jButton26.setFont(new java.awt.Font("sansserif", 0, 10)); // NOI18N
        jButton26.setText("N");
        jButton26.setEnabled(false);
        jButton26.setFocusable(false);
        jButton26.setPreferredSize(new java.awt.Dimension(37, 37));
        row3.add(jButton26);

        jButton27.setFont(new java.awt.Font("sansserif", 0, 10)); // NOI18N
        jButton27.setText("M");
        jButton27.setEnabled(false);
        jButton27.setFocusable(false);
        jButton27.setPreferredSize(new java.awt.Dimension(37, 37));
        row3.add(jButton27);
        row3.add(filler1);

        keyPanel.add(row3);

        bottomPanel.add(keyPanel, "keyboard");

        endPanel.setLayout(new java.awt.BorderLayout());

        endMessage.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        endMessage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        endMessage.setText("You win!");
        endPanel.add(endMessage, java.awt.BorderLayout.CENTER);

        endButtons.setLayout(new javax.swing.BoxLayout(endButtons, javax.swing.BoxLayout.Y_AXIS));

        againButton.setText("Play Again (Easy)");
        againButton.setAlignmentX(JComponent.CENTER_ALIGNMENT);
        againButton.setAlignmentY(0.0F);
        againButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        againButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                againButtonActionPerformed(evt);
            }
        });
        endButtons.add(againButton);

        homeButton.setText("Home");
        homeButton.setAlignmentX(JComponent.CENTER_ALIGNMENT);
        homeButton.setAlignmentY(0.0F);
        homeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        homeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeButtonActionPerformed(evt);
            }
        });
        endButtons.add(homeButton);

        endPanel.add(endButtons, java.awt.BorderLayout.PAGE_END);

        bottomPanel.add(endPanel, "end");

        getContentPane().add(bottomPanel, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void hardButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_hardButtonItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            startButton.setEnabled(true);
            selectedKey = "Hard";
            startButton.setToolTipText("Start a game with a hard word");
        }
    }//GEN-LAST:event_hardButtonItemStateChanged

    private void mediumButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_mediumButtonItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            startButton.setEnabled(true);
            selectedKey = "Medium";
            startButton.setToolTipText("Start a game with a medium word");
        }
    }//GEN-LAST:event_mediumButtonItemStateChanged

    private void easyButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_easyButtonItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            startButton.setEnabled(true);
            selectedKey = "Easy";
            startButton.setToolTipText("Start a game with an easy word");
        }
    }//GEN-LAST:event_easyButtonItemStateChanged

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        Dictionary dict = DICTIONARIES.get(selectedKey);
        if (dict == null)
            word = new Word(getCustomString());
        else {
            if (dict.isOutOfWords())
                dict.reset();
            word = dict.nextWord();
        }

        backButton.setEnabled(true);
        updateText(word.toBlanks());
        guessedLabel.setText(" ");
        resetKeyboard(true);
        ((CardLayout) leftPanel.getLayout()).show(leftPanel, "textPanel");
        ((CardLayout) bottomPanel.getLayout()).show(bottomPanel, "keyboard");
        keyPanel.requestFocus();
        if (word.getImage() != null)
            updateImage(word.getImage());
    }//GEN-LAST:event_startButtonActionPerformed

    private void customButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_customButtonItemStateChanged
        boolean selected = evt.getStateChange() == ItemEvent.SELECTED;
        customField.setVisible(selected);
        selectedKey = "Custom";

        if (selected && (customField.getPassword().length == 0 || customField.getPassword().length > 30))
            startButton.setEnabled(false);

        if (selected) {
            customField.requestFocus();
            customField.selectAll();
            startButton.setToolTipText("Enter a custom word");
        }

        revalidate();
    }//GEN-LAST:event_customButtonItemStateChanged

    private void customFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customFieldActionPerformed
        if (startButton.isEnabled())
            startButton.doClick();
    }//GEN-LAST:event_customFieldActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        goHome();
    }//GEN-LAST:event_backButtonActionPerformed

    private void homeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeButtonActionPerformed
        goHome();
    }//GEN-LAST:event_homeButtonActionPerformed

    private void againButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_againButtonActionPerformed
        word = null;
        startButtonActionPerformed(evt);
    }//GEN-LAST:event_againButtonActionPerformed

    private void wordLabelComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_wordLabelComponentResized
        updateText(null);
    }//GEN-LAST:event_wordLabelComponentResized

    private void imageLabelComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_imageLabelComponentResized
        updateImage(null);
    }//GEN-LAST:event_imageLabelComponentResized

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HangmanFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(() -> {
            new HangmanFrame().setVisible(true);
        });
    }

    //set up everything on start panel
    private void initStartPanel() {
        //custom word field
        customField.setVisible(false); //hide until activated
        customField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent de) {
                if (getCustomString().length() > 30) { //word too long
                    startButton.setEnabled(false);
                    startButton.setToolTipText("Word is too long");
                }
                else if (!startButton.isEnabled()
                        && getCustomString().length() > 0) { //trigger start button
                    startButton.setEnabled(true);
                    startButton.setToolTipText("Start a game with a custom word");
                }
            }

            @Override
            public void removeUpdate(DocumentEvent de) {
                if (startButton.isEnabled()
                        && getCustomString().length() == 0) { //deleted until empty
                    startButton.setEnabled(false);
                    startButton.setToolTipText("Enter a custom word");
                }
                else if (!startButton.isEnabled()
                        && getCustomString().length() <= 30
                        && getCustomString().length() > 0) { //no longer too long
                    startButton.setEnabled(true);
                    startButton.setToolTipText("Start a game with a custom word");
                }
            }

            @Override
            public void changedUpdate(DocumentEvent de) {
            }
        });
        //start button
        startPanel.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT)
                .put(KeyStroke.getKeyStroke("ENTER"), "enter");
        startPanel.getActionMap().put("enter", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                startButton.doClick();
            }
        });
        startPanel.requestFocus();
    }

    //processes custom string
    private String getCustomString() {
        String fixed = new String(customField.getPassword()).replaceAll("[^a-zA-Z]", "");
        fixed = fixed.toUpperCase().trim();
        return fixed;
    }

    //reset keyboard buttons, rebind
    private void resetKeyboard(boolean enabled) {
        keyPanel.getInputMap().clear();
        keyPanel.getActionMap().clear();
        for (Component panel : keyPanel.getComponents())
            for (Component component : ((JPanel) panel).getComponents())
                if (component instanceof JButton) { //find all key buttons
                    JButton button = (JButton) component;
                    button.setEnabled(enabled); //enable or disable all
                    if (enabled) {
                        //make them send keys
                        if (button.getActionListeners().length == 0)
                            button.addActionListener((ActionEvent ae) -> {
                                guessLetter(((JButton) ae.getSource()).getText()); //send to hangman
                                ((JButton) ae.getSource()).setEnabled(false);
                            });
                        //bind keys
                        keyPanel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(
                                KeyStroke.getKeyStroke(button.getText().toUpperCase()), "pressed" + button.getText());
                        keyPanel.getActionMap().put("pressed" + button.getText(), new AbstractAction() {
                            @Override
                            public void actionPerformed(ActionEvent ae) {
                                if (keyPanel.isVisible())
                                    button.doClick();
                            }
                        });
                    }
                }
    }

    //attempt a letter to guess
    private void guessLetter(String letter) {
        boolean success = word.guess(letter);
        wordLabel.setText(word.toBlanks());
        guessedLabel.setText(word.toGuessed());

        if (success) {
            if (word.won()) { //game won
                endMessage.setText("You win!");
                ((CardLayout) bottomPanel.getLayout()).show(bottomPanel, "end"); //show end thing
                setUpEndButtons(); //set up everything on that card
            }
        }
        else {
            if (word.getImage() != null)
                updateImage(word.getImage()); //draw thing on hangman

            if (word.lost()) { //game lost
                wordLabel.setText(word.toString()); //display correct answer
                endMessage.setText("You lose!");
                ((CardLayout) bottomPanel.getLayout()).show(bottomPanel, "end");
                setUpEndButtons();
            }
        }
    }

    //set up game over stuff
    private void setUpEndButtons() {
        backButton.setEnabled(false);

        if (selectedKey.equals("Custom")) {
            homeButton.requestFocus();
            againButton.setVisible(false);
        }
        else {
            againButton.setVisible(true);
            againButton.setText("Play Again (" + selectedKey + ")"); //make play again button
            againButton.requestFocus();
        }
    }

    private void goHome() {
        word = null;

        guessedLabel.setText(" ");
        ((CardLayout) leftPanel.getLayout()).show(leftPanel, "startPanel");
        ((CardLayout) bottomPanel.getLayout()).show(bottomPanel, "keyboard");
        if (customButton.isSelected()) {
            customField.requestFocus();
            customField.selectAll();
        }
        else if (easyButton.isSelected())
            easyButton.requestFocus();
        else if (mediumButton.isSelected())
            mediumButton.requestFocus();
        else if (hardButton.isSelected())
            hardButton.requestFocus();
        if (Word.getStartImage() != null)
            updateImage(Word.getStartImage());

        resetKeyboard(false);
    }

    private void updateImage(Image img) {
        if (img == null)
            img = currentImage;
        else
            currentImage = img;

        BufferedImage bimg = new BufferedImage(imageLabel.getWidth(), imageLabel.getHeight(), BufferedImage.TYPE_INT_ARGB);
        Graphics2D g = bimg.createGraphics();
        RenderingHints rh = new RenderingHints(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g.setRenderingHints(rh);
        g.drawImage(img, imageLabel.getX(), imageLabel.getY(),
                imageLabel.getWidth(), imageLabel.getHeight(), null);
        imageLabel.setIcon(new ImageIcon(bimg));
    }

    private void updateText(String text) {
        if (text == null)
            text = wordLabel.getText();
        boolean fit = false;
        Font font = null;
        for (int size = 30; size > 4 && !fit; size--) {
            font = new Font("Courier New", Font.BOLD, size);
            FontMetrics metrics = wordLabel.getFontMetrics(font);
            int width = metrics.stringWidth(text) + 2;
            int height = metrics.getHeight() + 2;
            fit = width < wordLabel.getWidth() && height < wordLabel.getHeight();
        }
        wordLabel.setFont(font);
        wordLabel.setText(text);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton againButton;
    private javax.swing.JButton backButton;
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JPanel centerPanel;
    private javax.swing.JRadioButton customButton;
    private javax.swing.JPasswordField customField;
    private javax.swing.JPanel customPanel;
    private javax.swing.ButtonGroup difficultyButtons;
    private javax.swing.JRadioButton easyButton;
    private javax.swing.JPanel endButtons;
    private javax.swing.JLabel endMessage;
    private javax.swing.JPanel endPanel;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.JLabel guessedLabel;
    private javax.swing.JRadioButton hardButton;
    private javax.swing.JButton homeButton;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton22;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton24;
    private javax.swing.JButton jButton25;
    private javax.swing.JButton jButton26;
    private javax.swing.JButton jButton27;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JPanel keyPanel;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JRadioButton mediumButton;
    private javax.swing.JPanel rightPanel;
    private javax.swing.JPanel row1;
    private javax.swing.JPanel row2;
    private javax.swing.JPanel row3;
    private javax.swing.JButton startButton;
    private javax.swing.JPanel startPanel;
    private javax.swing.JPanel textPanel;
    private javax.swing.JLabel wordLabel;
    // End of variables declaration//GEN-END:variables
}
